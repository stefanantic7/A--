program                     : declarations

declarations                : (import_function | function_declaration | statement_list)*

import_function             : ID<'use'> ID (COMMA ID)*

function_declaration        : ID<'decfun'> ID LPAREN parameters RPAREN COLON function_type_spec function_body

parameters                  : empty
							| param (COMMA param)*

param                       : variable COLON type_spec

function_body               : LBRACKET statement_list* RBRACKET

var_declaration_list        : ID<'dec'> variable COLON type_spec var_initialization SEMICOLON

var_initialization          : (ASSIGN (expr | string_expr | bool_expr))?

statement_list              : var_declaration_list
							| function_call SEMICOLON
							| condition_statement
							| loop_condition
							| return_statement
							| empty

return_statement            : RETURN (expr| string_expr | bool_expr) SEMICOLON

condition_statement         : ID<'cond'> LPAREN bool_expr RPAREN LBRACKET statement_list RBRACKET

loop_condition              : ID<'loond'> LPAREN bool_expr RPAREN LBRACKET statement_list RBRACKET

type_spec                   : (int | float | string | array | boolean)

function_type_spec          : (int | float | string | array | boolean | do)

variable                    : DOLLAR ID

bool_complex_expr           : logic_unar_operation? LPAREN bool_simple_expr RPAREN
                                (logic_operation logic_unar_operation? LPAREN bool_simple_expr RPAREN)*

bool_simple_expr            : expr comparision_operation expr (comparision_operation expr)*

bool_expr                   : bool_simple_expr | bool_complex_expr

comparision_operation       : (LT | GT | LE | GE | EQ | NEQ)

logic_operation             : AND, OR

logic_unar_operation        : NOT

expr                        : term ((PLUS | MINUS) term)*

string_expr                 : string_term (DOT string_term)*

string_term                 : STRING | variable | function_call

term                        : factor ((MUL | DIV | REAL_DIV | MOD) factor)*

factor                      : PLUS factor
							| MINUS factor
							| INT_NUMBER
							| FLOAT_NUMBER
							| LPAREN expr RPAREN
							| variable
							| function_call

function_call               : AT ID LPAREN (variable | function_call)? (COMMA (variable | function_call))* RPAREN
